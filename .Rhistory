s_next <- Aw_prev[which.max(abs(Aw_prev))]
print(s_next)
w_next <-  (A %*% w_k[,i-1])/s_next
w_k[,i] <- (w_next)
}
w_k[,n] <- normalize.vector(w_k[,n])
return(list("eigval_approx"=s_next,"eigvec_approx"=w_k[,n]))
}
pma <- power_method(A)
pma
eigen(A)
normalize <- function(x){
(x-min(x))/(max(x)-min(x))
}
A <- matrix(c(1, 2, 3,2, -1, 4,3, 4, -5),nrow=3)
power_method <- function(A,n=15){
m <- ncol(A)
w_0 <- rep(1,m)
#w_k matrix with all wks as a column
w_k <- mat.or.vec(m,n)
w_k[,1] <- w_0
for(i in 2:n){
#i-1?
Aw_prev <- A%*%(w_k[,i-1])
s_next <- Aw_prev[which.max(abs(Aw_prev))]
w_next <-  (A %*% w_k[,i-1])/s_next
w_k[,i] <- (w_next)
}
w_k[,n] <- normalize(w_k[,n])
return(list("eigval_approx"=s_next,"eigvec_approx"=w_k[,n]))
}
pma <- power_method(A)
pma
eigen(A)
normalize <- function(x){
#(x-min(x))/(max(x)-min(x))
denom <- sqrt(sum(vector^2))
return(vector/denom)
}
A <- matrix(c(1, 2, 3,2, -1, 4,3, 4, -5),nrow=3)
power_method <- function(A,n=15){
m <- ncol(A)
w_0 <- rep(1,m)
#w_k matrix with all wks as a column
w_k <- mat.or.vec(m,n)
w_k[,1] <- w_0
for(i in 2:n){
#i-1?
Aw_prev <- A%*%(w_k[,i-1])
s_next <- Aw_prev[which.max(abs(Aw_prev))]
w_next <-  (A %*% w_k[,i-1])/s_next
w_k[,i] <- (w_next)
}
w_k[,n] <- normalize(w_k[,n])
return(list("eigval_approx"=s_next,"eigvec_approx"=w_k[,n]))
}
pma <- power_method(A)
normalize <- function(x){
#(x-min(x))/(max(x)-min(x))
denom <- sqrt(sum(x^2))
return(x/denom)
}
A <- matrix(c(1, 2, 3,2, -1, 4,3, 4, -5),nrow=3)
power_method <- function(A,n=15){
m <- ncol(A)
w_0 <- rep(1,m)
#w_k matrix with all wks as a column
w_k <- mat.or.vec(m,n)
w_k[,1] <- w_0
for(i in 2:n){
#i-1?
Aw_prev <- A%*%(w_k[,i-1])
s_next <- Aw_prev[which.max(abs(Aw_prev))]
w_next <-  (A %*% w_k[,i-1])/s_next
w_k[,i] <- (w_next)
}
w_k[,n] <- normalize(w_k[,n])
return(list("eigval_approx"=s_next,"eigvec_approx"=w_k[,n]))
}
pma <- power_method(A)
pma
eigen(A)
B <- matrix(c(5,1,0,1,4,0,0,0,1),nrow=3)
pmb <- power_method(B,40)
pmb
eig_B <- eigen(B)
eig_B
?plot
plot(d,col=kmeans3$cluster,pch=19,cex=1,main="K means Clustering",sub="k=3")
plot(d,col=kmeans3$cluster+1,pch=19,cex=1,main="K means Clustering",sub="k=3")
kmeans3 <- kmeans(d,3)
plot(d,col=kmeans3$cluster+2,pch=19,cex=1,main="K means Clustering",sub="k=3")
table(kmeans3$cluster)
kmeans2 <- kmeans(d,2)
plot(d,col=kmeans2$cluster+2,pch=19,cex=1,main="K means Clustering",sub="k=2")
table(kmeans3$cluster)
table(kmeans2$cluster)
kmeans4 <- kmeans(d,4)
plot(d,col=kmeans4$cluster+2,pch=19,cex=1,main="K means Clustering",sub="k=4")
table(kmeans4$cluster)
kmeans_pca <- kmeans(d_scores[,1:2],3)
kmeans_pca <- kmeans(d_scores[,1:2],3)
plot(d,col=kmeans_pca$cluster+2,pch=19,cex=1,main="K means Clustering on First 2 PCs",sub="k=3")
?scale
kmeans_pca_s <- kmeans(scale(d,center=FALSE),3)
plot(d,col=kmeans_pca_s$cluster+2,pch=19,cex=1,main="K means Clustering on Scaled",sub="k=3")
table(kmeans_pca_s$cluster)
kmeans_pca_s <- kmeans(scale(d),3)
plot(d,col=kmeans_pca_s$cluster+2,pch=19,cex=1,main="K means Clustering on Scaled",sub="k=3")
table(kmeans_pca_s$cluster)
kmeans_pca_s <- kmeans(scale(d,center=FALSE),3)
plot(d,col=kmeans_pca_s$cluster+2,pch=19,cex=1,main="K means Clustering on Scaled",sub="k=3")
table(kmeans_pca_s$cluster)
knitr::opts_chunk$set(echo = TRUE)
ggplot(USArrests, aes(x=Assault, y=Murder))+
geom_point()+
geom_smooth(method=lm)
cor(USArrests$Murder, USArrests$Assault)
#Assault and Rape
ggplot(USArrests, aes(x=Assault, y=Rape))+
geom_point()+
geom_smooth(method=lm)
cor(USArrests$Rape, USArrests$Assault)
#Rape and Murder
ggplot(USArrests, aes(x=Rape, y=Murder))+
geom_point()+
geom_smooth(method=lm)
cor(USArrests$Murder, USArrests$Rape)
#Urban Population and Murder
ggplot(USArrests, aes(x=UrbanPop, y=Murder))+
geom_point()+
geom_smooth(method=lm)
cor(USArrests$Murder, USArrests$UrbanPop)
ggplot()+
geom_point(aes(x=1:length(eigenvalues), y=cumsum(eigenvalues)/sum(eigenvalues)))+
ggtitle("Screeplot")+
labs(x="First PCs", y="fraction of total variance explained")
pcs_withurbpop <- cbind(UrbanPop = USArrests$UrbanPop, pcs)
ggplot(pcs_withurbpop)+
geom_point(aes(x=PC1, y=PC3,color=UrbanPop))+
geom_text(aes(x=PC1,y=PC3, label=State,color=UrbanPop))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
#start with n-dimensional vector, iterate m times
#start with a vector w_0 that contains arbitrary initial vector
normalize <- function(x){
#(x-min(x))/(max(x)-min(x))
den <- sqrt(sum(x^2))
return(x/denom)
}
A <- matrix(c(1, 2, 3,2, -1, 4,3, 4, -5),nrow=3)
power_method <- function(A,n=15){
m <- ncol(A)
w_0 <- rep(1,m)
#w_k matrix with all wks as a column
w_k <- mat.or.vec(m,n)
w_k[,1] <- w_0
for(i in 2:n){
Aw_prev <- A%*%(w_k[,i-1])
s_next <- Aw_prev[which.max(abs(Aw_prev))]
w_next <-  (A %*% w_k[,i-1])/s_next
w_k[,i] <- (w_next)
}
w_k[,n] <- normalize(w_k[,n])
return(list("eigval_approx"=s_next,"eigvec_approx"=w_k[,n]))
}
pma <- power_method(A)
```{r setup, include=TRUE}
```{r setup, include=FALSE}
```{r setup, include=FALSE}
```{r setup, include=FALSE}
```{r setup, include=TRUE}
```{r setup, include=FALSE}
library(dplyr)
library(ggplot2)
#start with n-dimensional vector, iterate m times
#start with a vector w_0 that contains arbitrary initial vector
normalize <- function(x){
#(x-min(x))/(max(x)-min(x))
den <- sqrt(sum(x^2))
return(x/denom)
}
A <- matrix(c(1, 2, 3,2, -1, 4,3, 4, -5),nrow=3)
power_method <- function(A,n=15){
m <- ncol(A)
w_0 <- rep(1,m)
#w_k matrix with all wks as a column
w_k <- mat.or.vec(m,n)
w_k[,1] <- w_0
for(i in 2:n){
Aw_prev <- A%*%(w_k[,i-1])
s_next <- Aw_prev[which.max(abs(Aw_prev))]
w_next <-  (A %*% w_k[,i-1])/s_next
w_k[,i] <- (w_next)
}
w_k[,n] <- normalize(w_k[,n])
return(list("eigval_approx"=s_next,"eigvec_approx"=w_k[,n]))
}
pma <- power_method(A)
pcs_withurbpop <- cbind(UrbanPop = USArrests$UrbanPop, pcs)
ggplot(pcs_withurbpop)+
geom_point(aes(x=PC1, y=PC3,color=UrbanPop))+
geom_text(aes(x=PC1,y=PC3, label=State,color=UrbanPop))
pcs_withurbpop <- cbind(UrbanPop = USArrests$UrbanPop, pcs)
ggplot(pcs_withurbpop)+
geom_point(aes(x=PC1, y=PC3,color=UrbanPop))+
geom_text(aes(x=PC1,y=PC3, label=State,color=UrbanPop))
pcs_withurbpop
pcs_withurbpop <- cbind(UrbanPop = USArrests$UrbanPop, pcs)
ggplot(pcs_withurbpop)+
geom_point(aes(x=PC1, y=PC3,color=UrbanPop))+
geom_text(aes(x=PC1,y=PC3,color=UrbanPop))
pcs <- data.frame(principal_vectors)
pcs <- cbind(State = rownames(pcs), pcs)
pcs
ggplot(pcs)+
geom_point(aes(x=PC1, y=PC2))+
geom_text(aes(x=PC1,y=PC2, label=State))
biplot(pcaArrests)
eigen(A)
pma
pcs_withurbpop <- cbind(UrbanPop = USArrests$UrbanPop, pcs)
ggplot(pcs_withurbpop)+
geom_point(aes(x=PC1, y=PC3,color=UrbanPop))+
geom_text(aes(x=PC1,y=PC3, label=State,color=UrbanPop))
set.seed(1997)
d <- matrix(rnorm(60*50), ncol=50)
d[1:20,] <- d[1:20,]+4
d[21:40,] <- d[21:40,]-2
d[41:60,] <- d[41:60,]-7
ggplot(d_scores)+
geom_point(aes(x=PC1,y=PC2,color=class))+
ggtitle("First 2 PCs")
kmeans3 <- kmeans(d,3)
plot(d,col=kmeans3$cluster+2,pch=19,cex=1,main="K means Clustering",sub="k=3")
table(kmeans3$cluster)
kmeans2 <- kmeans(d,2)
plot(d,col=kmeans2$cluster+2,pch=19,cex=1,main="K means Clustering",sub="k=2")
table(kmeans2$cluster)
kmeans2 <- kmeans(d,2)
plot(d,col=kmeans2$cluster+2,pch=19,cex=1,main="K means Clustering",sub="k=2")
table(kmeans2$cluster)
kmeans4 <- kmeans(d,4)
plot(d,col=kmeans4$cluster+2,pch=19,cex=1,main="K means Clustering",sub="k=4")
table(kmeans4$cluster)
kmeans_pca <- kmeans(d_scores[,1:2],3)
plot(d,col=kmeans_pca$cluster+2,pch=19,cex=1,main="K means Clustering on First 2 PCs",sub="k=3")
kmeans_pca <- kmeans(d_scores[,1:2],3)
plot(d,col=kmeans_pca$cluster+2,pch=19,cex=1,main="K means Clustering on First 2 PCs",sub="k=3")
kmeans_pca_s <- kmeans(scale(d,center=FALSE),3)
plot(d,col=kmeans_pca_s$cluster+2,pch=19,cex=1,main="K means Clustering on Scaled",sub="k=3")
table(kmeans_pca_s$cluster)
setwd("~/Desktop/Berkeley/Spring19/stat_154/154project")
?read.csv
setwd("~/Desktop/Berkeley/Spring19/stat_154/154project")
mote_location <- read.csv("./data/mote-location-data.txt")
mote_location <- read.csv("./data/mote-location-data.txt")
View(mote_location)
datetime <- read.csv("./data/sonoma-dates.m.gz ")
datetime <- read.csv("./data/sonoma-dates")
?read.csv
data_net <- read.csv("./data/sonoma-data-net.csv", header=TRUE)
#data retrieved from the flash logs
data_log <- read.csv("./data/sonoma-data-log.csv")
View(data_log)
?read.csv
View(datetime)
View(data_net)
View(mote_location)
mote_location <- read.csv("./data/mote-location-data.txt", sep="  ")
View(mote_location)
mote_location <- read.csv("./data/mote-location-data.txt", sep=" ")
View(mote_location)
mote_location <- read.csv("./data/mote-location-data.txt", sep=" ")
datetime <- read.csv("./data/sonoma-dates", header=FALSE)
#data retrieved over the wireless network
data_net <- read.csv("./data/sonoma-data-net.csv")
#data retrieved from the flash logs
data_log <- read.csv("./data/sonoma-data-log.csv")
#concatenated
data_all <- read.csv("./data/sonoma-data-all.csv")
View(data_all)
View(datetime)
mote_location <- read.delim("./data/mote-location-data.txt")
View(mote_location)
mote_location <- read.delim("./data/mote-location-data.txt")
?read.delim
mote_location <- read.delim("./data/mote-location-data.txt")
mote_location <- read.delim("./data/mote-location-data.txt", sep="", ncols=5)
mote_location <- read.delim("./data/mote-location-data.txt", sep="")
View(mote_location)
View(data_all)
View(data_net)
View(datetime)
datetime <- read.csv("./data/sonoma-dates", header=FALSE)
View(datetime)
View(data_log)
View(data_all)
View(datetime)
datetime <- read.delim("./data/sonoma-dates", header=FALSE)
View(datetime)
View(datetime)
View(datetime)
fake <- list(names=c("n1","n2"), values=c(1,2))
View(fake)
install.packages("R.Matlab")
install.packages("R.matlab")
library(R.matlab)
datetime <- readMat("./data/sonoma-dates")
View(datetime)
datetime <- readMat("./data/sonoma-dates")
?readMat
View(datetime)
histogram(data_net$epoch)
hist(data_net$epoch)
# Check histograms of each variable in two data files (Plot only the ones that you think are interesting or relevant).
#Which variable is not consistent?
#Convert the data to the same range)
library(ggplot2)
hist(data_log$epoch)
?range
range(data_net$epoch)
range(data_net$epoch)-range(data_log$epoch)
range(data_net$voltage)-range(data_log$voltage)
\input{../macros.tex}
<<{r  global_options},include= TRUE,echo=FALSE>>=
knitr::opts_chunk$set(include= TRUE,echo = TRUE, eval=FALSE,
message = FALSE, warning = FALSE,
fig.width=3, fig.height=3, fig.align='center',
fig.asp = 1
)
@
setwd("../labs")
data <- read.csv("mpg.csv")
print(head(data))
cat("nrows = ", nrow(data), "ncols = ", ncol(data), "\n")
set.seed(123456)
test_size <- floor(nrow(data)*0.1)
test_ind <- sample(seq_len(nrow(data)), size = test_size)
dataTest <- data[test_ind, ]
dataUse <- data[-test_ind, ]
cat("nrows = ", nrow(dataUse), "ncols = ", ncol(dataUse), "\n")
#Do some EDA type graphs
head(data[,1])
#Do some EDA type graphs
head(data[,0])
#Do some EDA type graphs
head(data[,4])
hist(data[,4])
#Do some EDA type graphs
hist(data[,1])
myOLS <- function(X, Y){
# Compute oridinary least squares
# Args:
#   X: predictor matrix, obs * variables
#   Y: responses
#
# Returns:
#   coefficients: vector of regression coefficient estimates
#   fitted_values: vector of fitted values
#   residuals: vector of residuals
#
n <- nrow(X)
newX <-  as.matrix(cbind(X, ones=rep(1,n)))
#less expensive than making a new matrix
beta <- solve(t(newX) %*% newX, t(newX) %*% Y)
yhat <- newX %*% beta
residual <- y-yhat
output_list <- list("coefficients" = beta, "fitted_values" = yhat, "residuals" = residual)
return(output_list)
}
?summary
#Do some EDA type graphs
summary(data[,1])
#Do some EDA type graphs
ncol(data)
View(data)
hist(data$mpg)
hist(data$cylinders)
hist(data$displacement)
#Do some EDA type graphs
library(ggplot2)
gpglot(data=data, aes(x=mpg, y=model_year))+
geom_point()
library(ggplot2)
ggplot(data=data, aes(x=mpg, y=model_year))+
geom_point()
ggplot(data=data, aes(x=model_year, y=mpg))+
geom_point()
ggplot(data=data, aes(x=mpg, y=horsepower))+
geom_point()
ggplot(data=data, aes(x=mpg, y=horsepower))+
geom_point()
res_OLS <- lm(mpg ~ as.numeric(horsepower) + weight + acceleration, data = dataUse)
res_OLS$coefficients
reg_OLS <- lm(mpg ~ as.numeric(horsepower) + weight + acceleration, data = dataUse)
reg_OLS$coefficients
range(data_net$voltage)-range(data_log$voltage)
range(data_net$epoch)-range(data_log$epoch)
range(data_net$voltage)
range(data_log$voltage)
View(data_log)
range(data_net$nodeid)-range(data_log$nodeid)
range(data_log$nodeid)
(data_net$nodeid)
range(data_net$nodeid)
range(data_log$nodeid)
knitr::opts_chunk$set(echo = TRUE)
source(data_cleaning.R)
source("data_cleaning.R")
source("./data_cleaning.R")
setwd("~/Desktop/Berkeley/Spring19/stat_154/154project")
setwd("~/Desktop/Berkeley/Spring19/stat_154/154project")
source("./data_cleaning.R")
setwd("~/Desktop/Berkeley/Spring19/stat_154/154project")
source("./data_cleaning .R")
range(data_net$temperature)
View(data_net)
range(data_net$humid_temp)
data_net$humid_temp
range(data_log$nodeid)
range(data_net$nodeid)
ggplot(data_net, aes(x=humidity)) + geom_histogram()
range(data_net$humid_temp)
max(data_net$humid_temp)
min(data_net$humid_temp)
?read.csv
ggplot(data_net, aes(x=humid_temp)) + geom_histogram()
range(data_log$humid_temp)
ggplot(data_log, aes(x=humid_temp)) + geom_histogram()
ggplot() +
geom_histogram(data_log, aes(x=humid_temp))+
geom_histogram(data_net, aes(x=humid_temp))
range(data_net$humidity)
range(data_log$humidity)
ggplot(data_net, aes(x=humidity)) + geom_histogram()
ggplot(data_log, aes(x=humidity)) + geom_histogram()
range(data_net$humidity)
data_net$humidity
data_log$humidity
ggplot(data_net, aes(x=hamatop)) + geom_histogram()
ggplot(data_log, aes(x=hamatop)) + geom_histogram()
range(data_net$hamabot)
range(data_log$hamabot)
ggplot(data_net, aes(x=hamabot)) + geom_histogram()
ggplot(data_log, aes(x=hamabot)) + geom_histogram()
summary(data_net$humid_temp)
summary(data_log$humid_temp)
summary(data_net$humidity)
summary(data_log$humidity)
summary(data_net$hamatop)
summary(data_log$hamatop)
summary(data_net$hamabot)
summary(data_log$hamabot)
summary(data_net$humid_temp)
summary(data_log$humid_temp)
ggplot(data_net, aes(x=humid_temp)) + geom_histogram()
ggplot(data_log, aes(x=humid_temp)) + geom_histogram()
library(dplyr)
data_main <- full_join(data_net, data_log, by = c("nodeid" = "nodeid", "epoch" = "epoch"))
?full_join
anti_join(data_net, data_log, by = c("nodeid" = "nodeid", "epoch" = "epoch"))
data_main <- left_join(data_net, data_log, by = c("nodeid" = "nodeid", "epoch" = "epoch"))
just_log <- anti_join(data_log, data_net, by = c("nodeid" = "nodeid", "epoch" = "epoch"))
just_log <- anti_join(data_log, data_net, by = c("nodeid" = "nodeid", "epoch" = "epoch"))
data_main <- full_join(data_net, just_log )
just_log$result_time <- just_log$result_time+".000000"
just_log$result_time
data_log$result_time
range(data_log$nodeid)
summary(data_log$nodeid)
hist(data_log$nodeid)
ggplot(data_log, aes(x=nodeid)) + geom_histogram()
summary(data_log$nodeid)
data_log_ex <- filter(data_log, nodeid<600000)
ggplot(data_log_ex, aes(x=nodeid)) + geom_histogram()
summary(data_log$nodeid)
data_log_ex <- filter(data_log, nodeid<60000)
ggplot(data_log_ex, aes(x=nodeid)) + geom_histogram()
log_nodeid_outlier <- filter(data_log, nodeid>60000)
log_nodeid_outlier
?geom_histogram
ggplot(data_log_ex, aes(x=nodeid)) + geom_histogram(bindwidth=5)
range(data_net$voltage)
nrow(filter(data_log, nodeid=2))
nrow(filter(data_log, nodeid==2))
nrow(filter(data_log, nodeid==NA))
nrow(filter(data_log, nodeid==0))
summary(data_log$nodeid)
summary(data_log$epoch)
summary(data_log$nodeid)
log_nodeid_outlier <- filter(data_log, nodeid>60000)
log_nodeid_outlier
data_log_ex <- filter(data_log, nodeid<60000)
ggplot(data_log_ex, aes(x=nodeid)) + geom_histogram(bindwidth=5)
summary(data_log_ex)
summary(data_log_ex$nodeid)
summary(data_net$nodeid)
ggplot(data_net, aes(x=nodeid)) + geom_histogram(bindwidth=5)
summary(data_log$nodeid)
data_log_ex <- filter(data_log, nodeid<60000)
summary(data_log_ex$nodeid)
ggplot(data_net, aes(x=nodeid)) + geom_histogram(bindwidth=5)
summary(data_net$nodeid)
View(mote_location)
View(mote_location)
unique(mote_location$ID)
length(unique(mote_location$ID))
length(unique(mote_location$Height))
summary(data_net$hamatop)
summary(data_log$hamatop)
